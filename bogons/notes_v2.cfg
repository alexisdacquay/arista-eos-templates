BGP configuration for IP peering
Security and manageability





Introduction

This article provides suggestions of configuration for a typical BGP peering use case, with consideration for manageability and security.


Security

It is recommended to approach other aspects of security for Arista EOS, which are covered in other articles, listed below. The present article focusses solely on BGP peering.

Securing EOS CLI: 
https://eos.arista.com/securing-eos-cli/

Restricting access to the switch/router:
https://eos.arista.com/restricting-access-to-the-switch/

Arista EOS hardening guide:
https://eos.arista.com/arista-eos-hardening-guide/



BGP Security

Different facets of BGP need to be involved for protection, filtering invalid parameters:

- BGP protocol TTL: restrict to drop invalid peers request from beyond the domain you trust.
Feature details:
https://eos.arista.com/eos-4-17-1f/gtsm-for-bgp/

- BGP protocol peer ASN: it seem obvious, but since there are features (bgp listen...) to automatically peer and assign ASN without explicitely dictate the ASN, higher security would require specifying the ASNs. The "bgp listen ..." feature is not suitable for edge peering, it is used for simpler operations but only suitable within a very trusted environement

- Prefixes AS-path's ASNs: Since direct peers and routers behind them may be able to modify the prefix ASNs (as-path replacement), the AS-path's ASNs alone are not enough for trusting prefixes. You should rely on the IP prefixes too.

- Prefixes IP: Common prefix-list filtering, enhanced by the ability to load prefix-lists from a file, either by URL (HTTP/HTTPS/SCP) or local flash. This is particularly useful for dynamic files or very large files (Full Bogons black list). The route-maps support hierachal structure, so it is possible to have very flexible and organised filtering policy.
Example of simple bogon prefix list: https://www.team-cymru.org/Services/Bogons/bogon-bn-agg.txt

Example of bogon list converted as prefix-list ready to use on Arista EOS: https://github.com/alexisdacquay/arista-eos-templates/tree/master/bogons
This link also provide a version usable as remote file, calling it via "ip prefix-list <PL_NAME> source <local or mote location>"
Example:
!
ip prefix-list PL_BOGONS source https://some.address.com/bogons_full
!
This provide a neat way to manage very large filtering, and ease reflecting its dynamic nature (easy refresh methods)


Team-Cymru is a trusted source for listing bogons prefixes (https://www.team-cymru.org), but you may use your own trusted reference. You can find a recent snapshot converted for use on Arista EOS at https://github.com/alexisdacquay/arista-eos-templates/tree/master/bogons.
The different files you can find there are:
- 
ip-prefix-list-bogons-source-seed.cfg       <--- File containing the prefix-list entries in file format
Example:
seq 10 permit 0.0.0.0/8 le 32
seq 20 permit 10.0.0.0/8 le 32
seq 30 permit 100.64.0.0/10 le 32
[...]

ip-prefix-list-bogons-source.cfg            <--- File containing the CLI command creating the prefix-list, which calls a source file as feed to populate all the entries. The running-configuration will only be populated with that single line that refers to the file. The content of the file itself is not included in the running-configuration, for clarity.
Example:
ip prefix-list PL_BOGONS source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsfull-source-seed.cfg


ip-prefix-list-bogons-standalone.cfg        <--- classical standalone complete prefix-list configuration that can be pasted in CLI and would appear in the "sh run" output
Example:
!
ip prefix-list PL_BOGONS seq 10 deny 0.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 20 deny 10.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 30 deny 100.64.0.0/10 le 32
[...]
!


ip-prefix-list-bogonsfull-source-seed.cfg   <--- Bogons full (unallocated + alian) entries in file format for the prefix-list





In the below you notice that the prefix-list that use a source file is used in a route-map.
This is because there cannot be a trailing 0.0.0.0/0 in the file format prefix entries; this is by design, a safeguard to avoid big mistakes. If you need to allow "everything else" than you need to create a relevant follow-up route-map entry. A "route-map permit" with not specific match would default to match all (standard behaviour), you do not need to create a prefix-list permitting 0.0.0.0/0. The route-map can then be applied to BGP neighbour or BGP network statements. 

!
ip prefix-list PL_BOGONS_ALL source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsall-source-seed.cfg
!
route-map RM_IN deny 10
   match ip address prefix-list PL_BOGONS_ALL
!
route-map RM_IN permit 1000
    description Default permit. File format prefix entries cannot have trailing 0/0
!


For short prefix-list you may feel comfortable configuring them fully in the configuration, without using prefix-list source and a file. For example, the Bogon list is fairly simple and does not justify employing the source file.
!
ip prefix-list PL_BOGONS seq 10 deny 0.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 20 deny 10.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 30 deny 100.64.0.0/10 le 32
ip prefix-list PL_BOGONS seq 40 deny 127.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 50 deny 169.254.0.0/16 le 32
ip prefix-list PL_BOGONS seq 60 deny 172.16.0.0/12 le 32
ip prefix-list PL_BOGONS seq 70 deny 192.0.0.0/24 le 32
ip prefix-list PL_BOGONS seq 80 deny 192.0.2.0/24 le 32
ip prefix-list PL_BOGONS seq 90 deny 192.168.0.0/16 le 32
ip prefix-list PL_BOGONS seq 100 deny 198.18.0.0/15 le 32
ip prefix-list PL_BOGONS seq 110 deny 198.51.100.0/24 le 32
ip prefix-list PL_BOGONS seq 120 deny 203.0.113.0/24 le 32
ip prefix-list PL_BOGONS seq 130 deny 224.0.0.0/3 le 32
ip prefix-list PL_BOGONS seq 1000 permit 0.0.0.0/0 le 32
!

One advantage of the prefix-list source method is that the source file can be updated relatively frequently and it is easy to reflect these file changes into EOS by refreshing the prefix-list; which is effectively doing a fresh lookup to the file and applies it again.

It is recommended to refresh the prefix-list at least at boot-up, but since your Arista device may not need to be rebooted for a very long time, your risk to have outdated entries. Make sure you refresh the prefix-list to reflect updates made in the source file. For example, the Full Bogons public lists may be updated daily. Please consider updating the prefix-list:
- manually with the EOS commands "refresh ip prefix-list"
- schedule automatic daily refresh with the "schedule" feature
It is not recommended to "leave and forget" it, for best security (do not allow invalid prefixes) and legitimate connectivity (do not block newly valid prefixes), you must revisit this regularly.

Example of refresh at boot-up
!
event-handler REFRESH-PREFIX-LIST
   trigger on-boot
   action bash Cli -p 15 -c "refresh ip prefix-list"
   delay 120
   timeout 120
   asynchronous
!

Example of refresh at regular interval (daily at 03:00)
!
schedule schedule-refresh-prefix-list at 03:00:00 interval 1440 timeout 1 max-log-files 10 command refresh ip prefix-list
!


This article describes how to restrict access to Arista EOS by way of control-plane access-list. For hardening the BGP control-plane you can restrict to only the trusted peer IP addresses.
Use this article as reference:
https://eos.arista.com/restricting-access-to-the-switch/

a) copy your current default control-plane ACL to a new ACL.
Note: the default control-plane ACL might vary between version as features are added and might require new entry in that default ACL. Therefore, when copying that default ACL make sure you take a fresh one from your current EOS version, not a legacy copy from a past EOS version.

b) tune the new ACL to restrict BGP (and other protocols)

c) configure EOS to use that new ACL. You can always fall back to the read-only default ACL if you need.

These three steps are detailed below.

a) copy the default control-plane ACL

Below is an example of the read-only default control-plane ACL. Some entries might be different than what you have in your own EOS because it includes recent features (e.g. multihop-bfd, micro-bfd, etc):

ip access-list default-control-plane-acl
        statistics per-entry
        10 permit icmp any any
        20 permit ip any any tracked
        30 permit udp any any eq bfd ttl eq 255
        40 permit udp any any eq bfd-echo ttl eq 254
        50 permit udp any any eq multihop-bfd
        60 permit udp any any eq micro-bfd
        70 permit ospf any any
        80 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp
        90 permit udp any any eq bootps bootpc snmp rip ntp ldp
        100 permit tcp any any eq mlag ttl eq 255
        110 permit udp any any eq mlag ttl eq 255
        120 permit vrrp any any
        130 permit ahp any any
        140 permit pim any any
        150 permit igmp any any
        160 permit tcp any any range 5900 5910
        170 permit tcp any any range 50000 50100
        180 permit udp any any range 51000 51100
        190 permit tcp any any eq 3333
        200 permit tcp any any eq nat ttl eq 255
        210 permit tcp any eq bgp any
        220 permit rsvp any any



Copy/paste the default ACL into a new ACL (for example name "my-control-plane-acl-01") with the the adequate modifications.

In the below ACL, 'bgp' was removed as a destination TCP port in line 80, and instead added to a new line 1000 for a more restrictive statement. While the line 210 already exists for bgp as source TCP port, it not restrictive enough, so new entries are added in the 1000 range.
Note that only ingress traffic is filtered, so you only need to match the traffic destined to the local router, not the traffic going out to the remote peers.
In the below example, the new rules 1000 and 1010 have:
- source IP: <TRUSTED_PEERS>
- destination: <MY_IP>

Obviously, you should have serious interest in hardening EOS not only for BGP but also many other protocols such as SSH, HTTPS, telnet (inactive by default), etc. The current document focusses on BGP.

ip access-list my-control-plane-acl-01
        statistics per-entry
        10 permit icmp any any
        20 permit ip any any tracked
        30 permit udp any any eq bfd ttl eq 255
        40 permit udp any any eq bfd-echo ttl eq 254
        50 permit udp any any eq multihop-bfd
        60 permit udp any any eq micro-bfd
        70 permit ospf any any
        80 permit tcp any any eq ssh telnet www snmp https msdp ldp
        90 permit udp any any eq bootps bootpc snmp rip ntp ldp
        100 permit tcp any any eq mlag ttl eq 255
        110 permit udp any any eq mlag ttl eq 255
        120 permit vrrp any any
        130 permit ahp any any
        140 permit pim any any
        150 permit igmp any any
        160 permit tcp any any range 5900 5910
        170 permit tcp any any range 50000 50100
        180 permit udp any any range 51000 51100
        190 permit tcp any any eq 3333
        200 permit tcp any any eq nat ttl eq 255
        220 permit rsvp any any
        ! New:
        1010 permit tcp <TRUSTED_PEERS> <MY_IP> bgp
        1000 permit tcp <TRUSTED_PEERS> eq bgp <MY_IP>
        ! Tracking, to identify dropped TCP traffic
        2000 deny tcp any any eq bgp log [match 3 packets, 0:00:00 ago]
        2010 deny tcp any eq bgp any log
        exit
        



c) Apply the new control-plane ACL:
!
config
  control-plane 
    ip access-group my-default-control-plane-acl-01 in 
  exit
!

Note: the traffic is filtered *ingress*, for inbound traffic.

Verify the that ACL has taken effect for control-plane filtering, by looking up for match counts statistics per entry.
In the below example, successful trusted connection show "[match 4 packets, 0:00:02 ago]":
The undesired

arista#show ip access-lists
[...]
IP Access List my-default-control-plane-acl-01
        statistics per-entry
        [...]
        1000 permit tcp host 10.0.0.3 host 10.0.0.2 eq bgp [match 4 packets, 0:00:02 ago]
        1010 permit tcp host 10.0.0.3 eq bgp host 10.0.0.2
        [...]
        2000 deny tcp any any eq bgp log [match 3 packets, 0:00:00 ago]
        2010 deny tcp any eq bgp any log

The ACL "deny" entries with "log" show records in the log for the blocked TCP connections:

arista#show log
Nov 15 17:41:01 s7152 Acl: %ACL-6-IPACCESS: list my-default-control-pla denied tcp 10.0.0.3(35229) -> 10.0.0.2(179)
Nov 15 17:41:02 s7152 Acl: %ACL-6-IPACCESS: list my-default-control-pla denied tcp 10.0.0.3(35229) -> 10.0.0.2(179)
Nov 15 17:41:04 s7152 Acl: %ACL-6-IPACCESS: list my-default-control-pla denied tcp 10.0.0.3(35229) -> 10.0.0.2(179)



!------------------ Full BGP configuration template ------------------

!
event-handler REFRESH-PREFIX-LIST
   trigger on-boot
   action bash Cli -p 15 -c "refresh ip prefix-list"
   delay 120
   timeout 120
   asynchronous
!
schedule schedule-refresh-prefix-list at 03:00:00 interval 1440 timeout 1 max-log-files 10 command refresh ip prefix-list
!
ip prefix-list PL_BOGONS source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsfull-source-seed.cfg
!
ip prefix-list PL_OUT description Legitimate prefixes to advertise
ip prefix-list PL_OUT seq 10 permit <MY_PREFIX>/<MY_SUBNETMASK>
ip prefix-list PL_OUT seq 1000 deny 0.0.0.0/0 le 32
!
route-map RM_IN deny 10
   match ip address prefix-list PL_BOGONS
!
route-map RM_IN permit 1000
   description Default permit - everything else
!
!
router bgp <ASN>
!
    bgp graceful-restart
    !
    ! Some defaults (for information only):
    !graceful-restart stalepath-time 300
    !graceful-restart restart-time 300
    !bgp log-neighbor-changes
    !
    neighbor <PEER_IP> remote-as <PEER_ASN>
    neighbor <PEER_IP> description <PEER_DESCRIPTION>
    !
    ! Prevents spoofing or DoS to BGP from remote sources
    neighbor <PEER_IP> ttl maximum-hops <MAX_HOPS>
    !
    ! Set peer authentication by password (MD5 hash)
    neighbor <PEER_IP> password <PASSWORD> 
    !
    ! If you want to load prefixes by URL mode, since it does not accept trailing 
    ! 0/0, then you must use route-map. See the presented example above. 
    ! If instead the filtering is simple then you may use prefix-list instead.
    neighbor <PEER_IP> route-map RM_IN in
    !
    ! You may use a prefix-list to announce only your prefixes
    neighbor <PEER_IP> prefix-list PL_OUT out
    !
    ! This is a default, and recommended:
    !neighbor <PEER_IP> soft-reconfiguration inbound
    !
    ! Exceeding this max will generate a Syslog warning (but no action taken)
    ! There is a default threshold for all peers set to 12000
    neighbor <PEER_IP> maximum-routes <WARNING_THRESHOLD>
    !
    ! If you want further protection (rather than just warning), then the following
    ! command, upong exceeding the max_accepted will permanently shut the peer into
    ! IDLE state until a "clear ip bgp ..." command is entered.
    ! neighbor <PEER_IP> maximum-accepted-routes <SHUTTING_THRESHOLD> warning-limit <WARNING_THRESHOLD>
    !
    ! Benefit from ECMP Load-balancing (default is "maximum-paths 1" )
    maximum-paths 16 
    !
    ! To improve BGP convergence for BGP peers that are not on a directl physical
    ! connection, you may want to use BFD (including multi-hop BFD support)
    ! https://eos.arista.com/eos-4-17-0f/bfd-enchancements/
    ! https://eos.arista.com/eos-4-20-1f/multihop-bfd/
    !
    ! You would advertise summaries by use of BGP aggregate or static routes
    ! that match the network statement prefix.
    network <SUBNET> <NET_SUBNETMASK>
!
! If using static route to populate your routing table with summaries, you may
! want to bring dynamic considerations. One optino is BFD tracking for static
! routes: https://eos.arista.com/eos-4-20-1f/bfd-for-static-routes/
! Another option is log tracking, reacting to events for populating or removing
! the static route, if desired:
! https://eos.arista.com/ip-static-route-with-health-check/
ip route 123.0.0.0/22 Null0
!
ip access-list my-control-plane-acl-01
        statistics per-entry
        10 permit icmp any any
        20 permit ip any any tracked
        30 permit udp any any eq bfd ttl eq 255
        40 permit udp any any eq bfd-echo ttl eq 254
        50 permit udp any any eq multihop-bfd
        60 permit udp any any eq micro-bfd
        70 permit ospf any any
        80 permit tcp any any eq ssh telnet www snmp https msdp ldp
        90 permit udp any any eq bootps bootpc snmp rip ntp ldp
        100 permit tcp any any eq mlag ttl eq 255
        110 permit udp any any eq mlag ttl eq 255
        120 permit vrrp any any
        130 permit ahp any any
        140 permit pim any any
        150 permit igmp any any
        160 permit tcp any any range 5900 5910
        170 permit tcp any any range 50000 50100
        180 permit udp any any range 51000 51100
        190 permit tcp any any eq 3333
        200 permit tcp any any eq nat ttl eq 255
        220 permit rsvp any any
        ! New:
        1010 permit tcp <TRUSTED_PEERS> <MY_IP> bgp
        1000 permit tcp <TRUSTED_PEERS> eq bgp <MY_IP>
        ! Tracking, to identify dropped TCP traffic
        2000 deny tcp any any eq bgp log [match 3 packets, 0:00:00 ago]
        2010 deny tcp any eq bgp any log
        exit 
!
  control-plane 
    ip access-group my-default-control-plane-acl-01 in 
  exit
!
