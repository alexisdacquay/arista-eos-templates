

Introduction

This article provides suggestions of configuration for a typical BGP peering use case, with consideration for manageability and security.


Security

It is recommended to approach other aspects of security for Arista EOS, which are covered in other articles, listed below. The present article focusses solely on BGP peering.

Securing EOS CLI: 
https://eos.arista.com/securing-eos-cli/

Restricting access to the switch/router:
https://eos.arista.com/restricting-access-to-the-switch/

Arista EOS hardening guide:
https://eos.arista.com/arista-eos-hardening-guide/



BGP Security

Different facets of BGP need to be involved for protection, filtering invalid parameters:

- BGP protocol TTL: restrict to drop invalid peers request from beyond the domain you trust

- BGP protocol peer ASN: it seem obvious, but since there are features (bgp listen...) to automatically peer and assign ASN without explicitely dictate the ASN, higher security would require specifying the ASNs. The "bgp listen ..." feature is not suitable for edge peering, it is used for simpler operations but only suitable within a very trusted environement

- Prefixes AS-path's ASNs: Since direct peers and routers behind them may be able to modify the prefix ASNs (as-path replacement), the AS-path's ASNs alone are not enough for trusting prefixes. You should rely on the IP prefixes too.

- Prefixes IP: Common prefix-list filtering, enhanced by the ability to load prefix-lists from a file, either by URL (HTTP/HTTPS/SCP) or local flash. This is particularly useful for dynamic files or very large files (Full Bogons black list). The route-maps support hierachal structure, so it is possible to have very flexible and organised filtering policy.
Example of simple bogon prefix list: https://www.team-cymru.org/Services/Bogons/bogon-bn-agg.txt

Example of bogon list converted as prefix-list ready to use on Arista EOS: https://github.com/alexisdacquay/arista-eos-templates/tree/master/bogons
This link also provide a version usable as remote file, calling it via "ip prefix-list <PL_NAME> source <local or mote location>
Example:
!
ip prefix-list PL_BOGONS source https://some.address.com/bogons_full
!
This provide a neat way to manage very large filtering, and ease reflecting its dynamic nature (easy refresh methods)


Team-Cymru is a trusted source for listing bogons prefixes (https://www.team-cymru.org), but you may use your own trusted reference. You can find a recent snapshot converted for use on Arista EOS at https://github.com/alexisdacquay/arista-eos-templates/tree/master/bogons.
The different files you can find there are:
- 
ip-prefix-list-bogons-source-seed.cfg       <--- File containing the prefix-list entries in file format
Example:
seq 10 permit 0.0.0.0/8 le 32
seq 20 permit 10.0.0.0/8 le 32
seq 30 permit 100.64.0.0/10 le 32
[...]

ip-prefix-list-bogons-source.cfg            <--- File containing the CLI command creating the prefix-list, which calls a source file as feed to populate all the entries. The running-configuration will only be populated with that single line that refers to the file. The content of the file itself isn't included in the running-configuration, for clarity.
Example:
ip prefix-list PL_BOGONS source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsfull-source-seed.cfg


ip-prefix-list-bogons-standalone.cfg        <--- classical standalone complete prefix-list configuration that can be pasted in CLI and would appear in the "sh run" output
Example:
!
ip prefix-list PL_BOGONS seq 10 deny 0.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 20 deny 10.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 30 deny 100.64.0.0/10 le 32
[...]


ip-prefix-list-bogonsfull-source-seed.cfg   <--- Bogons full (unallocated + alian) entries in file format for the prefix-list





In the below you notice that the prefix-list that use a source file is used in a route-map.
This is because there cannot be a trailing 0.0.0.0/0 in the file format prefix entries; this is by design, a safeguard to avoid big mistakes. If you need to allow "everything else" than you need to create a relevant follow-up route-map entry. A "route-map permit" with not specific match would default to match all (standard behaviour), you do not need to create a prefix-list permitting 0.0.0.0/0. The route-map can then be applied to BGP neighbour or BGP network statements. 

!
ip prefix-list PL_BOGONS_ALL source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsall-source-seed.cfg
!
route-map RM_IN deny 10
   match ip address prefix-list PL_BOGONS_ALL
!
route-map RM_IN permit 1000
    description Default permit. File format prefix entries cannot have trailing 0/0
!


For short prefix-list you may feel comfortable configuring them fully in the configuration, without using prefix-list source and a file. For example, the Bogon list is fairly simple and does not justify employing the source file.
!
ip prefix-list PL_BOGONS seq 10 deny 0.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 20 deny 10.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 30 deny 100.64.0.0/10 le 32
ip prefix-list PL_BOGONS seq 40 deny 127.0.0.0/8 le 32
ip prefix-list PL_BOGONS seq 50 deny 169.254.0.0/16 le 32
ip prefix-list PL_BOGONS seq 60 deny 172.16.0.0/12 le 32
ip prefix-list PL_BOGONS seq 70 deny 192.0.0.0/24 le 32
ip prefix-list PL_BOGONS seq 80 deny 192.0.2.0/24 le 32
ip prefix-list PL_BOGONS seq 90 deny 192.168.0.0/16 le 32
ip prefix-list PL_BOGONS seq 100 deny 198.18.0.0/15 le 32
ip prefix-list PL_BOGONS seq 110 deny 198.51.100.0/24 le 32
ip prefix-list PL_BOGONS seq 120 deny 203.0.113.0/24 le 32
ip prefix-list PL_BOGONS seq 130 deny 224.0.0.0/3 le 32
ip prefix-list PL_BOGONS seq 1000 permit 0.0.0.0/0 le 32
!

One advantage of the prefix-list source method is that the source file can be updated relatively frequently and it is easy to reflect these file changes into EOS by refreshing the prefix-list; which is effectively doing a fresh lookup to the file and applies it again.

It is recommended to refresh the prefix-list at least at boot-up, but since your Arista device may not need to be rebooted for a very long time, your risk to have outdated entries. Make sure you refresh the prefix-list to reflect updates made in the source file. For example, the Full Bogons public lists may be updated daily. Please consider updating the prefix-list:
- manually with the EOS commands "refresh ip prefix-list"
- schedule automatic daily refresh with the "schedule" feature
It is not recommended to "leave and forget" it, for best security (don't allow invalid prefixes) and legitimate connectivity (don't block newly valid prefixes), you must revisit this regularly.

Example of refresh at boot-up
!
event-handler REFRESH-PREFIX-LIST
   trigger on-boot
   action bash Cli -p 15 -c "refresh ip prefix-list"
   delay 120
   timeout 120
   asynchronous
!

Example of refresh at regular interval (daily at 03:00)
!
schedule schedule-refresh-prefix-list at 03:00:00 11/10/2018 interval 1440 timeout 1 max-log-files 10 command refresh ip prefix-list
!





ip prefix-list PL_BOGONS source https://raw.githubusercontent.com/alexisdacquay/arista-eos-templates/master/bogons/ip-prefix-list-bogonsfull-source-seed.cfg
!
ip prefix-list PL_OUT description Legitimate prefixes to advertise
ip prefix-list PL_OUT seq 10 permit <MY_PREFIX>/<MY_SUBNETMASK>
ip prefix-list PL_OUT seq 1000 deny 0.0.0.0/0 le 32
!
route-map RM_IN deny 10
   match ip address prefix-list PL_BOGONS
!
route-map RM_IN permit 1000
!
!
router bgp <ASN>
!
    bgp graceful-restart
    !
    ! Some defaults (for information only):
    !graceful-restart stalepath-time 300
    !graceful-restart restart-time 300
    !bgp log-neighbor-changes
    !
    neighbor <PEER_IP> remote-as <PEER_ASN>
    neighbor <PEER_IP> description <PEER_DESCRIPTION>
    !
    ! Prevents spoofing or DoS to BGP from remote sources
    neighbor <PEER_IP> ttl maximum-hops <MAX_HOPS>
    !
    ! Set peer authentication by password (MD5 hash)
    neighbor <PEER_IP> password <PASSWORD> 
    !
    ! If you want to load prefixes by URL mode, since it does not accept trailing 
    ! 0/0, then you must use route-map. See the presented example. 
    ! If instead the filtering is simple then you may use prefix-list instead.
    neighbor <PEER_IP> route-map RM_IN in
    !
    ! You may use a prefix-list to announce only your prefixes
    neighbor <PEER_IP> prefix-list PL_OUT out
    !
    ! This is a default, and recommended:
    !neighbor <PEER_IP> soft-reconfiguration inbound
    !
    ! Exceeding this max will generate a Syslog warning (but no action taken)
    ! There is a default threshold for all peers set to 12000
    neighbor <PEER_IP> maximum-routes <WARNING_THRESHOLD>
    !
    ! If you want further protection (rather than just warning), then the following
    ! command, upong exceeding the max_accepted will permanently shut the peer into
    ! IDLE state until a "clear ip bgp ..." command is entered.
    ! neighbor <PEER_IP> maximum-accepted-routes <SHUTTING_THRESHOLD> warning-limit <WARNING_THRESHOLD>
    !
    ! Benefit from ECMP Load-balancing (default is "maximum-paths 1" )
    maximum-paths 16 
    !


!
access-list 185 permit tcp host 10.10.5.1 host 10.10.5.2 eq 179
access-list 185 permit tcp host 10.10.5.1 eq bgp host 10.10.5.2
access-list 185 permit tcp host 10.10.10.1 host 10.10.10.2 eq 179
access-list 185 permit tcp host 10.10.10.1 eq bgp host 10.10.10.2
access-list 185 permit tcp host 172.17.70.2 host 172.17.70.1 eq 179
access-list 185 permit tcp host 172.17.70.2 eq bgp host 172.17.70.1
access-list 185 deny tcp any any eq 179 log-input
!



! Don't wait for the IGP to catch up.
no synchronization
!
! Be a little more forgiving of an occasional missed keepalive.
    no bgp fast-external-fallover
!
!











!
! Now add our null route and the loopback/iBGP route. Remember to add
! more specific non-null routes so that the packets travel to their
! intended destination!
ip route 192.0.2.0 255.255.255.0 Null0
ip route 192.0.2.0 255.255.255.128 192.168.50.5
ip route 192.0.2.128 255.255.255.128 192.168.50.8
ip route 172.17.70.2 255.255.255.255 192.168.50.2
!
! We protect TCP port 179 (BGP port) from miscreants by limiting
! access. Allow our peers to connect and log all other attempts.
! Remember to apply this ACL to the interfaces of the router or
! add it to existing ACLs.
! Please note that ACL 185 would block ALL traffic as written. This
! is designed to focus only on protecting BGP. You MUST modify ACL
! 185 to fit your environment and approved traffic patterns.
access-list 185 permit tcp host 10.10.5.1 host 10.10.5.2 eq 179
access-list 185 permit tcp host 10.10.5.1 eq bgp host 10.10.5.2
access-list 185 permit tcp host 10.10.10.1 host 10.10.10.2 eq 179
access-list 185 permit tcp host 10.10.10.1 eq bgp host 10.10.10.2
access-list 185 permit tcp host 172.17.70.2 host 172.17.70.1 eq 179
access-list 185 permit tcp host 172.17.70.2 eq bgp host 172.17.70.1
access-list 185 deny tcp any any eq 179 log-input
!

